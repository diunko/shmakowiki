ometa ShmakoWikiToc {
    keyword = 'para'
            | 'olist' | 'ulist' | 'olistItem' | 'ulistItem'
            | 'bold' | 'bold_'
            | 'italic' | 'italic_'
            | 'underline' | 'underline_'
            | 'strike' | 'strike_'
            | 'monospace' | 'monospace_'
            | 'superscript' | 'superscript_'
            | 'subscript' | 'subscript_'
            | 'link' | 'link_'
            | 'lineBreak',

    headertag = 'header1' | 'header2' | 'header3' | 'header4' | 'header5' | 'header6',

    header = [headertag:t tokens:c :a] -> { var h = [t, c, a]; ShmakoWikiToc.addTocHeader(h); h; },

    token = header
          | extension
          | [keyword:t tokens:ans] -> [t, ans]
          | escaped
          | :c,
    tokens = [token*:c] -> c,

    escaped = ['escaped':t :c] -> [t, c],

    extension = ['extension':t 'toc':tt :c :p] -> {
        var x;
        c[0] === true ? [t, tt, c, p] : (x = this.transform(c, p), [t, tt, [true, x.toc, x.ast], p])
    },
    extension = ['extension':t :tt :c :p] -> [t, tt, c, p],

    topLevel = tokens:c -> c
}

ShmakoWikiToc.tocs = [];

ShmakoWikiToc.transform = function(ast, p) {
    this.startToc();
    var _ast = this.match(ast, 'topLevel');
    if (p === 'nested') this.addNestedToc();
    return { ast: _ast, toc: this.finishToc() };
};

ShmakoWikiToc.startToc = function() {
    this.tocs.push({ toc: [] });
};

ShmakoWikiToc.finishToc = function() {
    return TocToList.convert(this.tocs.pop().toc);
};

ShmakoWikiToc.addTocHeader = function(header) {
    if (this.tocs && this.tocs.length) {
        this.tocs[this.tocs.length - 1].toc.push([header[0], api.astToPlain(header[1]), header[2]]);
    }
};

ShmakoWikiToc.addNestedToc = function() {
    var headers = this.tocs[this.tocs.length - 1].toc,
        parent = this.tocs[this.tocs.length - 2];
    if (parent) parent.toc = parent.toc.concat(headers);
};
